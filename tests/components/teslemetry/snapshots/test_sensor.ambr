# serializer version: 1
# name: test_sensors[sensor.energy_site_battery-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Battery',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'percentage_charged',
    'unique_id': '123456-percentage_charged',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.energy_site_battery-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site Battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '95.5053740373966',
  })
# ---
# name: test_sensors[sensor.energy_site_battery_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_battery_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:home-battery',
    'original_name': 'Battery power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_power',
    'unique_id': '123456-battery_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_battery_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Battery power',
      'icon': 'mdi:home-battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_battery_power',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '5.06',
  })
# ---
# name: test_sensors[sensor.energy_site_energy_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_energy_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY_STORAGE: 'energy_storage'>,
    'original_icon': 'mdi:battery',
    'original_name': 'Energy left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'energy_left',
    'unique_id': '123456-energy_left',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_energy_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Energy left',
      'icon': 'mdi:battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_energy_left',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '38.8964736842105',
  })
# ---
# name: test_sensors[sensor.energy_site_generator_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_generator_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:generator-stationary',
    'original_name': 'Generator power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'generator_power',
    'unique_id': '123456-generator_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_generator_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Generator power',
      'icon': 'mdi:generator-stationary',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_generator_power',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:transmission-tower',
    'original_name': 'Grid power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_power',
    'unique_id': '123456-grid_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid power',
      'icon': 'mdi:transmission-tower',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_power',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_grid_services_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:transmission-tower',
    'original_name': 'Grid services power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_services_power',
    'unique_id': '123456-grid_services_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_grid_services_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Grid services power',
      'icon': 'mdi:transmission-tower',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_grid_services_power',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_load_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_load_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:power-plug',
    'original_name': 'Load power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'load_power',
    'unique_id': '123456-load_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_load_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Load power',
      'icon': 'mdi:power-plug',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_load_power',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '6.245',
  })
# ---
# name: test_sensors[sensor.energy_site_percentage_charged-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_percentage_charged',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Percentage charged',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'percentage_charged',
    'unique_id': '123456-percentage_charged',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.energy_site_percentage_charged-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Energy Site Percentage charged',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_percentage_charged',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '95.5053740373966',
  })
# ---
# name: test_sensors[sensor.energy_site_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:solar-power',
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'solar_power',
    'unique_id': '123456-solar_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Power',
      'icon': 'mdi:solar-power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_power',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '1.185',
  })
# ---
# name: test_sensors[sensor.energy_site_power_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_power_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:home-battery',
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'battery_power',
    'unique_id': '123456-battery_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_power_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Power',
      'icon': 'mdi:home-battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_power_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '5.06',
  })
# ---
# name: test_sensors[sensor.energy_site_power_3-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_power_3',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:power-plug',
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'load_power',
    'unique_id': '123456-load_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_power_3-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Power',
      'icon': 'mdi:power-plug',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_power_3',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '6.245',
  })
# ---
# name: test_sensors[sensor.energy_site_power_4-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_power_4',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:transmission-tower',
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_power',
    'unique_id': '123456-grid_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_power_4-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Power',
      'icon': 'mdi:transmission-tower',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_power_4',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_power_5-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_power_5',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:transmission-tower',
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'grid_services_power',
    'unique_id': '123456-grid_services_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_power_5-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Power',
      'icon': 'mdi:transmission-tower',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_power_5',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_power_6-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_power_6',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:generator-stationary',
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'generator_power',
    'unique_id': '123456-generator_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_power_6-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Power',
      'icon': 'mdi:generator-stationary',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_power_6',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.energy_site_solar_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.energy_site_solar_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:solar-power',
    'original_name': 'Solar power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'solar_power',
    'unique_id': '123456-solar_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.energy_site_solar_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Energy Site Solar power',
      'icon': 'mdi:solar-power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_solar_power',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '1.185',
  })
# ---
# name: test_sensors[sensor.energy_site_stored_energy-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_stored_energy',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY_STORAGE: 'energy_storage'>,
    'original_icon': 'mdi:battery',
    'original_name': 'Stored energy',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'energy_left',
    'unique_id': '123456-energy_left',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_stored_energy-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Stored energy',
      'icon': 'mdi:battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_stored_energy',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '38.8964736842105',
  })
# ---
# name: test_sensors[sensor.energy_site_stored_energy_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_stored_energy_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY_STORAGE: 'energy_storage'>,
    'original_icon': 'mdi:battery-high',
    'original_name': 'Stored energy',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_pack_energy',
    'unique_id': '123456-total_pack_energy',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_stored_energy_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Stored energy',
      'icon': 'mdi:battery-high',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_stored_energy_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '40.727',
  })
# ---
# name: test_sensors[sensor.energy_site_total_pack_energy-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.energy_site_total_pack_energy',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY_STORAGE: 'energy_storage'>,
    'original_icon': 'mdi:battery-high',
    'original_name': 'Total pack energy',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'total_pack_energy',
    'unique_id': '123456-total_pack_energy',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.energy_site_total_pack_energy-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy_storage',
      'friendly_name': 'Energy Site Total pack energy',
      'icon': 'mdi:battery-high',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.energy_site_total_pack_energy',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '40.727',
  })
# ---
# name: test_sensors[sensor.test_battery-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_battery',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Battery',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_usable_battery_level',
    'unique_id': 'VINVINVIN-charge_state_usable_battery_level',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.test_battery-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test Battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '77',
  })
# ---
# name: test_sensors[sensor.test_battery_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_battery_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Battery',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_energy_at_arrival',
    'unique_id': 'VINVINVIN-drive_state_active_route_energy_at_arrival',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.test_battery_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test Battery',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_battery_level-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_battery_level',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'Battery level',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_usable_battery_level',
    'unique_id': 'VINVINVIN-charge_state_usable_battery_level',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.test_battery_level-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test Battery level',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_level',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '77',
  })
# ---
# name: test_sensors[sensor.test_battery_range-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_battery_range',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Battery range',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_battery_range',
    'unique_id': 'VINVINVIN-charge_state_battery_range',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors[sensor.test_battery_range-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Battery range',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_battery_range',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '429.48563328',
  })
# ---
# name: test_sensors[sensor.test_charge_energy_added-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charge_energy_added',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Charge energy added',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_energy_added',
    'unique_id': 'VINVINVIN-charge_state_charge_energy_added',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.test_charge_energy_added-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Test Charge energy added',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_energy_added',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charge_rate-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_charge_rate',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.SPEED: 'speed'>,
    'original_icon': None,
    'original_name': 'Charge rate',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_rate',
    'unique_id': 'VINVINVIN-charge_state_charge_rate',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[sensor.test_charge_rate-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'speed',
      'friendly_name': 'Test Charge rate',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charge_rate',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charger_current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_charger_current',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.CURRENT: 'current'>,
    'original_icon': None,
    'original_name': 'Charger current',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_actual_current',
    'unique_id': 'VINVINVIN-charge_state_charger_actual_current',
    'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
  })
# ---
# name: test_sensors[sensor.test_charger_current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'current',
      'friendly_name': 'Test Charger current',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_current',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charger_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_charger_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Charger power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_power',
    'unique_id': 'VINVINVIN-charge_state_charger_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.test_charger_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Test Charger power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_power',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_charger_voltage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_charger_voltage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.VOLTAGE: 'voltage'>,
    'original_icon': None,
    'original_name': 'Charger voltage',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_voltage',
    'unique_id': 'VINVINVIN-charge_state_charger_voltage',
    'unit_of_measurement': <UnitOfElectricPotential.VOLT: 'V'>,
  })
# ---
# name: test_sensors[sensor.test_charger_voltage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'voltage',
      'friendly_name': 'Test Charger voltage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfElectricPotential.VOLT: 'V'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_charger_voltage',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.test_current-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_current',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.CURRENT: 'current'>,
    'original_icon': None,
    'original_name': 'Current',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_actual_current',
    'unique_id': 'VINVINVIN-charge_state_charger_actual_current',
    'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
  })
# ---
# name: test_sensors[sensor.test_current-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'current',
      'friendly_name': 'Test Current',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfElectricCurrent.AMPERE: 'A'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_current',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_destination-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_destination',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': 'mdi:map-marker',
    'original_name': 'Destination',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_destination',
    'unique_id': 'VINVINVIN-drive_state_active_route_destination',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_destination-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test Destination',
      'icon': 'mdi:map-marker',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_destination',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_distance-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_distance',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Distance',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_battery_range',
    'unique_id': 'VINVINVIN-charge_state_battery_range',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors[sensor.test_distance-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_distance',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '429.48563328',
  })
# ---
# name: test_sensors[sensor.test_distance_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_distance_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Distance',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_odometer',
    'unique_id': 'VINVINVIN-vehicle_state_odometer',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors[sensor.test_distance_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Distance',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_distance_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '10430.189495371',
  })
# ---
# name: test_sensors[sensor.test_distance_3-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_distance_3',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Distance',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_miles_to_arrival',
    'unique_id': 'VINVINVIN-drive_state_active_route_miles_to_arrival',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors[sensor.test_distance_3-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Distance',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_distance_3',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_distance_to_arrival-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_distance_to_arrival',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Distance to arrival',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_miles_to_arrival',
    'unique_id': 'VINVINVIN-drive_state_active_route_miles_to_arrival',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors[sensor.test_distance_to_arrival-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Distance to arrival',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_distance_to_arrival',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_driver_temperature_setting-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_driver_temperature_setting',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Driver temperature setting',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_driver_temp_setting',
    'unique_id': 'VINVINVIN-climate_state_driver_temp_setting',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_driver_temperature_setting-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Driver temperature setting',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_driver_temperature_setting',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '22',
  })
# ---
# name: test_sensors[sensor.test_duration-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_duration',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Duration',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_traffic_minutes_delay',
    'unique_id': 'VINVINVIN-drive_state_active_route_traffic_minutes_delay',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensors[sensor.test_duration-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Test Duration',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_duration',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_energy-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_energy',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.ENERGY: 'energy'>,
    'original_icon': None,
    'original_name': 'Energy',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_energy_added',
    'unique_id': 'VINVINVIN-charge_state_charge_energy_added',
    'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
  })
# ---
# name: test_sensors[sensor.test_energy-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'energy',
      'friendly_name': 'Test Energy',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfEnergy.KILO_WATT_HOUR: 'kWh'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_energy',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_inside_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_inside_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Inside temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_inside_temp',
    'unique_id': 'VINVINVIN-climate_state_inside_temp',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_inside_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Inside temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_inside_temperature',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '29.8',
  })
# ---
# name: test_sensors[sensor.test_none-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'p',
        'd',
        'r',
        'n',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_none',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:car-shift-pattern',
    'original_name': None,
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_shift_state',
    'unique_id': 'VINVINVIN-drive_state_shift_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_none-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Test None',
      'icon': 'mdi:car-shift-pattern',
      'options': list([
        'p',
        'd',
        'r',
        'n',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_none',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_none_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_none_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': 'mdi:map-marker',
    'original_name': None,
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_destination',
    'unique_id': 'VINVINVIN-drive_state_active_route_destination',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_none_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Test None',
      'icon': 'mdi:map-marker',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_none_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_odometer-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_odometer',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 0,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.DISTANCE: 'distance'>,
    'original_icon': None,
    'original_name': 'Odometer',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_odometer',
    'unique_id': 'VINVINVIN-vehicle_state_odometer',
    'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
  })
# ---
# name: test_sensors[sensor.test_odometer-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'distance',
      'friendly_name': 'Test Odometer',
      'state_class': <SensorStateClass.TOTAL_INCREASING: 'total_increasing'>,
      'unit_of_measurement': <UnitOfLength.KILOMETERS: 'km'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_odometer',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '10430.189495371',
  })
# ---
# name: test_sensors[sensor.test_outside_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_outside_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Outside temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_outside_temp',
    'unique_id': 'VINVINVIN-climate_state_outside_temp',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_outside_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Outside temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_outside_temperature',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '30',
  })
# ---
# name: test_sensors[sensor.test_passenger_temperature_setting-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_passenger_temperature_setting',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Passenger temperature setting',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_passenger_temp_setting',
    'unique_id': 'VINVINVIN-climate_state_passenger_temp_setting',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_passenger_temperature_setting-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Passenger temperature setting',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_passenger_temperature_setting',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '22',
  })
# ---
# name: test_sensors[sensor.test_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_power',
    'unique_id': 'VINVINVIN-charge_state_charger_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.test_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Test Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_power',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_power_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_power_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': None,
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_power',
    'unique_id': 'VINVINVIN-drive_state_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.test_power_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Test Power',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_power_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_pressure-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_pressure',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Pressure',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_fl',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_fl',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_pressure-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Pressure',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_pressure',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_pressure_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_pressure_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Pressure',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_fr',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_fr',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_pressure_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Pressure',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_pressure_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '40.6105682912393',
  })
# ---
# name: test_sensors[sensor.test_pressure_3-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_pressure_3',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Pressure',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_rl',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_rl',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_pressure_3-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Pressure',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_pressure_3',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_pressure_4-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_pressure_4',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Pressure',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_rr',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_rr',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_pressure_4-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Pressure',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_pressure_4',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_shift_state-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'options': list([
        'p',
        'd',
        'r',
        'n',
      ]),
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_shift_state',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:car-shift-pattern',
    'original_name': 'Shift state',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_shift_state',
    'unique_id': 'VINVINVIN-drive_state_shift_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_shift_state-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Test Shift state',
      'icon': 'mdi:car-shift-pattern',
      'options': list([
        'p',
        'd',
        'r',
        'n',
      ]),
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_shift_state',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_speed-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_speed',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.SPEED: 'speed'>,
    'original_icon': None,
    'original_name': 'Speed',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charge_rate',
    'unique_id': 'VINVINVIN-charge_state_charge_rate',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[sensor.test_speed-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'speed',
      'friendly_name': 'Test Speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_speed',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_speed_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_speed_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.SPEED: 'speed'>,
    'original_icon': None,
    'original_name': 'Speed',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_speed',
    'unique_id': 'VINVINVIN-drive_state_speed',
    'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
  })
# ---
# name: test_sensors[sensor.test_speed_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'speed',
      'friendly_name': 'Test Speed',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfSpeed.KILOMETERS_PER_HOUR: 'km/h'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_speed_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_state_of_charge_at_arrival-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_state_of_charge_at_arrival',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.BATTERY: 'battery'>,
    'original_icon': None,
    'original_name': 'State of charge at arrival',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_energy_at_arrival',
    'unique_id': 'VINVINVIN-drive_state_active_route_energy_at_arrival',
    'unit_of_measurement': '%',
  })
# ---
# name: test_sensors[sensor.test_state_of_charge_at_arrival-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'battery',
      'friendly_name': 'Test State of charge at arrival',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': '%',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_state_of_charge_at_arrival',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_temperature-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_temperature',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_inside_temp',
    'unique_id': 'VINVINVIN-climate_state_inside_temp',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_temperature-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_temperature',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '29.8',
  })
# ---
# name: test_sensors[sensor.test_temperature_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_temperature_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_outside_temp',
    'unique_id': 'VINVINVIN-climate_state_outside_temp',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_temperature_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_temperature_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '30',
  })
# ---
# name: test_sensors[sensor.test_temperature_3-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_temperature_3',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_driver_temp_setting',
    'unique_id': 'VINVINVIN-climate_state_driver_temp_setting',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_temperature_3-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_temperature_3',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '22',
  })
# ---
# name: test_sensors[sensor.test_temperature_4-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_temperature_4',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
    }),
    'original_device_class': <SensorDeviceClass.TEMPERATURE: 'temperature'>,
    'original_icon': None,
    'original_name': 'Temperature',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'climate_state_passenger_temp_setting',
    'unique_id': 'VINVINVIN-climate_state_passenger_temp_setting',
    'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
  })
# ---
# name: test_sensors[sensor.test_temperature_4-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'temperature',
      'friendly_name': 'Test Temperature',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTemperature.CELSIUS: '°C'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_temperature_4',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '22',
  })
# ---
# name: test_sensors[sensor.test_time_to_full_charge-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_time_to_full_charge',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Time to full charge',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_minutes_to_full_charge',
    'unique_id': 'VINVINVIN-charge_state_minutes_to_full_charge',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_time_to_full_charge-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Time to full charge',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_time_to_full_charge',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_timestamp-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_timestamp',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Timestamp',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_minutes_to_full_charge',
    'unique_id': 'VINVINVIN-charge_state_minutes_to_full_charge',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_timestamp-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Timestamp',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_timestamp',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_timestamp_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_timestamp_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.TIMESTAMP: 'timestamp'>,
    'original_icon': None,
    'original_name': 'Timestamp',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_minutes_to_arrival',
    'unique_id': 'VINVINVIN-drive_state_active_route_minutes_to_arrival',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.test_timestamp_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'timestamp',
      'friendly_name': 'Test Timestamp',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_timestamp_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_front_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure front left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_fl',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_fl',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure front left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_left',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_front_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure front right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_fr',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_fr',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_front_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure front right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_front_right',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '40.6105682912393',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_left-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_rear_left',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure rear left',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_rl',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_rl',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_left-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure rear left',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_left',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_right-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_tire_pressure_rear_right',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 1,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.PRESSURE: 'pressure'>,
    'original_icon': None,
    'original_name': 'Tire pressure rear right',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vehicle_state_tpms_pressure_rr',
    'unique_id': 'VINVINVIN-vehicle_state_tpms_pressure_rr',
    'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
  })
# ---
# name: test_sensors[sensor.test_tire_pressure_rear_right-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'pressure',
      'friendly_name': 'Test Tire pressure rear right',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPressure.PSI: 'psi'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_tire_pressure_rear_right',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '40.2479739314961',
  })
# ---
# name: test_sensors[sensor.test_traffic_delay-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.test_traffic_delay',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.DURATION: 'duration'>,
    'original_icon': None,
    'original_name': 'Traffic delay',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'drive_state_active_route_traffic_minutes_delay',
    'unique_id': 'VINVINVIN-drive_state_active_route_traffic_minutes_delay',
    'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
  })
# ---
# name: test_sensors[sensor.test_traffic_delay-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'duration',
      'friendly_name': 'Test Traffic delay',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfTime.MINUTES: 'min'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_traffic_delay',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0',
  })
# ---
# name: test_sensors[sensor.test_voltage-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.test_voltage',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.VOLTAGE: 'voltage'>,
    'original_icon': None,
    'original_name': 'Voltage',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'charge_state_charger_voltage',
    'unique_id': 'VINVINVIN-charge_state_charger_voltage',
    'unit_of_measurement': <UnitOfElectricPotential.VOLT: 'V'>,
  })
# ---
# name: test_sensors[sensor.test_voltage-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'voltage',
      'friendly_name': 'Test Voltage',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfElectricPotential.VOLT: 'V'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.test_voltage',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_fault_state',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:ev-station',
    'original_name': 'Fault state',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_fault_state',
    'unique_id': '123456-abd-123-wall_connector_fault_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Wall Connector Fault state',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_fault_state_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:ev-station',
    'original_name': 'Fault state',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_fault_state',
    'unique_id': '123456-bcd-234-wall_connector_fault_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_fault_state_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Wall Connector Fault state',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_fault_state_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_none-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_none',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:ev-station',
    'original_name': None,
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_state',
    'unique_id': '123456-abd-123-wall_connector_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_none-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Wall Connector None',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_none',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_none_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_none_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:ev-station',
    'original_name': None,
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_fault_state',
    'unique_id': '123456-abd-123-wall_connector_fault_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_none_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Wall Connector None',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_none_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_none_3-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_none_3',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': 'mdi:car-electric',
    'original_name': None,
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vin',
    'unique_id': '123456-abd-123-vin',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_none_3-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector None',
      'icon': 'mdi:car-electric',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_none_3',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.wall_connector_none_4-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_none_4',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:ev-station',
    'original_name': None,
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_state',
    'unique_id': '123456-bcd-234-wall_connector_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_none_4-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Wall Connector None',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_none_4',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_none_5-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_none_5',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:ev-station',
    'original_name': None,
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_fault_state',
    'unique_id': '123456-bcd-234-wall_connector_fault_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_none_5-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Wall Connector None',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_none_5',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_none_6-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_none_6',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': 'mdi:car-electric',
    'original_name': None,
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vin',
    'unique_id': '123456-bcd-234-vin',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_none_6-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector None',
      'icon': 'mdi:car-electric',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_none_6',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.wall_connector_power-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_power',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:ev-station',
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_power',
    'unique_id': '123456-abd-123-wall_connector_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.wall_connector_power-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'icon': 'mdi:ev-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.wall_connector_power_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': dict({
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
    }),
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_power_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
      'sensor': dict({
        'suggested_display_precision': 2,
      }),
      'sensor.private': dict({
        'suggested_unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
      }),
    }),
    'original_device_class': <SensorDeviceClass.POWER: 'power'>,
    'original_icon': 'mdi:ev-station',
    'original_name': 'Power',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_power',
    'unique_id': '123456-bcd-234-wall_connector_power',
    'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
  })
# ---
# name: test_sensors[sensor.wall_connector_power_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'power',
      'friendly_name': 'Wall Connector Power',
      'icon': 'mdi:ev-station',
      'state_class': <SensorStateClass.MEASUREMENT: 'measurement'>,
      'unit_of_measurement': <UnitOfPower.KILO_WATT: 'kW'>,
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_power_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '0.0',
  })
# ---
# name: test_sensors[sensor.wall_connector_state-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_state',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:ev-station',
    'original_name': 'State',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_state',
    'unique_id': '123456-abd-123-wall_connector_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_state-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Wall Connector State',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_state_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': <EntityCategory.DIAGNOSTIC: 'diagnostic'>,
    'entity_id': 'sensor.wall_connector_state_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': <SensorDeviceClass.ENUM: 'enum'>,
    'original_icon': 'mdi:ev-station',
    'original_name': 'State',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'wall_connector_state',
    'unique_id': '123456-bcd-234-wall_connector_state',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_state_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'device_class': 'enum',
      'friendly_name': 'Wall Connector State',
      'icon': 'mdi:ev-station',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_state_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': '2',
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_vehicle',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': 'mdi:car-electric',
    'original_name': 'Vehicle',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vin',
    'unique_id': '123456-abd-123-vin',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
      'icon': 'mdi:car-electric',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle_2-entry]
  EntityRegistryEntrySnapshot({
    'aliases': set({
    }),
    'area_id': None,
    'capabilities': None,
    'config_entry_id': <ANY>,
    'device_class': None,
    'device_id': <ANY>,
    'disabled_by': None,
    'domain': 'sensor',
    'entity_category': None,
    'entity_id': 'sensor.wall_connector_vehicle_2',
    'has_entity_name': True,
    'hidden_by': None,
    'icon': None,
    'id': <ANY>,
    'name': None,
    'options': dict({
    }),
    'original_device_class': None,
    'original_icon': 'mdi:car-electric',
    'original_name': 'Vehicle',
    'platform': 'teslemetry',
    'previous_unique_id': None,
    'supported_features': 0,
    'translation_key': 'vin',
    'unique_id': '123456-bcd-234-vin',
    'unit_of_measurement': None,
  })
# ---
# name: test_sensors[sensor.wall_connector_vehicle_2-state]
  StateSnapshot({
    'attributes': ReadOnlyDict({
      'friendly_name': 'Wall Connector Vehicle',
      'icon': 'mdi:car-electric',
    }),
    'context': <ANY>,
    'entity_id': 'sensor.wall_connector_vehicle_2',
    'last_changed': <ANY>,
    'last_updated': <ANY>,
    'state': 'unknown',
  })
# ---
